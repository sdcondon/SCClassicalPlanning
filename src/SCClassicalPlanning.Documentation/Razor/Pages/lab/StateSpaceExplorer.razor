@page "/lab/state-space-explorer"

@using SCClassicalPlanning;
@using SCClassicalPlanning.ExampleDomains.AsPDDL;
@using SCClassicalPlanning.Planning.StateAndGoalSpace;
@using SCClassicalPlanning.ProblemCreation;
@using System.ComponentModel.DataAnnotations;

<h3>Lab - State Space Explorer <Button Clicked="ShowExplanationModal" Size="Size.Small" Color="Color.Primary"><Icon Name="@("bi-info-circle")"></Icon></Button></h3>

<Modal @ref="explanationModal">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>Lab Explanation</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <p>
                This page is an interactive demonstration of (PDDL parsing and) the state space representation types found in the <a href="https://github.com/sdcondon/SCClassicalPlanning/tree/main/src/SCClassicalPlanning/Planning/StateAndGoalSpace">SCClassicalPlanning.Planning.StateAndGoalSpace</a> namespace.
                It runs entirely in your browser.
                Notes:
            </p>
            <ul>
                <li>
                    Use the buttons at the top of the form to populate it with example domain and problem definitions,
                    using a minimal version of <a href="https://www.google.com/search?q=planning+domain+definition+language">PDDL</a>.
                </li>
                <li>
                    Some guidance for defining problems as PDDL will be added to the getting started page at some point before v1.
                    For now, consult the presets and Internet resources about PDDL.
                    Note that we use an absolutely minimal version of the earliest public version of PDDL (1.2).
                    Absolutely no extensions are supported - not even typing.
                    Yet.
                </li>
                <li>
                    Once the problem definition has been submitted, a representation of the initial state of the problem will appear below the form, along with a link for each applicable action.
                    You can explore the state space by clicking on the action to apply.
                    Prior states will remain visible, to show the path you have taken from the initial state.
                    A "GOAL MET!" message will be shown if you reach a state that meets the goal.
                </li>
                <li>
                    The source code for this page can be found <a href="https://github.com/sdcondon/SCClassicalPlanning/blob/main/src/SCClassicalPlanning.Documentation/Razor/Pages/lab/StateSpaceExplorer.razor">here</a>.
                </li>
            </ul>
        </ModalBody>
    </ModalContent>
</Modal>

<EditForm Model=@formData OnSubmit=@HandleFormSubmission class="row" style="font-family: monospace">
    <DataAnnotationsValidator />
    <div class="form-group col-12">
        <label>Presets</label>
        <div>
            @foreach (var kvp in Presets)
            {
                <button @onclick="@(() => formData = kvp.Value.Invoke())">@kvp.Key</button>
                @(" ")
            }
        </div>
    </div>
    <div class="form-group col-md-6">
        <label for="domainPddlTextArea">Domain PDDL</label>
        <InputTextArea class="form-control small" id="domainPddlTextArea" @bind-Value=formData.DomainPDDL rows="12" />
        <ValidationMessage For="@(() => formData.DomainPDDL)" />
    </div>
    <div class="form-group col-md-6">
        <label for="problemPddlTextArea">Problem PDDL</label>
        <InputTextArea class="form-control small" id="factsTextArea" @bind-Value=formData.ProblemPDDL rows="12" />
        <ValidationMessage For="@(() => formData.ProblemPDDL)" />
    </div>
    <div class="form-group mt-2 col-12">
        <button type="submit" class="btn btn-primary">Submit / Reset</button>
    </div>
</EditForm>

@if (problem != null)
{
    void RenderListItem(LinkedListNode<StateSpaceEdge>? lastPathNode, StateSpaceNode stateNode, StateSpaceEdge? nextExploredEdge)
    {
        <li>
            @if (stateNode.State.Meets(problem.EndGoal))
            {
                <b>GOAL MET! </b>
            }
            @{
                // richer formatting functionality could make this more succinct, which would be nice..
                var stateElements = stateNode.State.Elements
                    .OrderBy(e => e.Identifier.ToString())
                    .ThenBy(e => string.Join(",", e.Arguments.Select(a => a.ToString())));
            }
            @string.Join(" ∧ ", stateElements)

            <ul>
                @foreach (var edge in stateNode.Edges)
                {
                    <li>
                        <!-- yeah, should be a button not an anchor, but all of bootstrap's classes make it look rubbish.. -->
                        <!-- disclaimer: the author doesn't consider themselves a front-end dev.. -->
                        <a href="#"
                            role="button"
                            style="@(edge.Equals(nextExploredEdge) ? "font-weight:bold" : "")"
                            @onclick="@(() => ExploreEdge(lastPathNode, edge))"
                            @onclick:preventDefault>@edge.ToString()</a>
                    </li>
                }
            </ul>
        </li>
    }

    <ol class="mt-4">
        @{
            RenderListItem(null, new StateSpaceNode(problem, problem.InitialState), path.First?.Value);
        }

        @for (var n = path.First; n != null; n = n.Next)
        {
            RenderListItem(n, n.Value.To, n.Next?.Value);
        }
    </ol>
}

@code {
    private static Dictionary<string, Func<FormData>> Presets = new()
    {
        ["[Empty]"] = () => new(
            domainPddl: string.Empty,
            problemPddl: string.Empty),

        ["Blocks World"] = () => new(
            domainPddl: BlocksWorldDomain.DomainPDDL,
            problemPddl: BlocksWorldDomain.ExampleProblemPDDL),

        ["Air Cargo"] = () => new(
            domainPddl: AirCargoDomain.DomainPDDL,
            problemPddl: AirCargoDomain.ExampleProblemPDDL),
    };

    private Modal? explanationModal;
    private FormData formData = Presets["Blocks World"].Invoke();

    private Problem? problem = null;
    private LinkedList<StateSpaceEdge> path = new();

    private Task ShowExplanationModal() => explanationModal!.Show();

    private void HandleFormSubmission(EditContext editContext)
    {
        problem = null;
        path.Clear();

        if (editContext.Validate())
        {
            problem = PddlParser.ParseProblem(formData.ProblemPDDL, formData.DomainPDDL);
        }
    }

    private void ExploreEdge(LinkedListNode<StateSpaceEdge>? lastPathNode, StateSpaceEdge edge)
    {
        if (lastPathNode != null)
        {
            // huh, weird - i thought .net linked lists could just be chopped.
            // turns out we have to remove nodes one at a time.
            while (lastPathNode.Next != null)
            {
                path.Remove(lastPathNode.Next);
            }
        }
        else
        {
            path.Clear();
        }

        path.AddLast(edge);
    }

    private class FormData : IValidatableObject
    {
        public FormData(string domainPddl, string problemPddl)
        {
            this.DomainPDDL = domainPddl;
            this.ProblemPDDL = problemPddl;
        }

        public string DomainPDDL { get; set; }

        public string ProblemPDDL { get; set; }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            // Yes, could cache the parse results to avoid parsing multiple times, but not worth it for now at least.
            // TODO: Some "TryParse.." methods might be useful - they'd certainly make this method a bit cleaner.
            // TODO: If we had a ParseError exception type, we could perhaps highlight the offending text..
            PddlDomain? domain = null;
            Problem? problem = null;
            List<ValidationResult> errors = new();
            try
            {
                domain = PddlParser.ParseDomain(DomainPDDL);

                try
                {
                    problem = PddlParser.ParseProblem(ProblemPDDL, domain!);
                }
                catch (Exception e)
                {
                    errors.Add(new ValidationResult(e.Message, new[] { nameof(ProblemPDDL) }));
                }
            }
            catch (Exception e)
            {
                errors.Add(new ValidationResult(e.Message, new[] { nameof(DomainPDDL) }));
            }

            return errors;
        }
    }
}