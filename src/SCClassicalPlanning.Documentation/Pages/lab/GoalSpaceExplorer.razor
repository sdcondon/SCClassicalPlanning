@page "/lab/goal-space-explorer"

@using SCClassicalPlanning;
@using SCClassicalPlanning.ExampleDomains.AsPDDL;
@using SCClassicalPlanning.Planning.StateAndGoalSpace;
@using SCClassicalPlanning.ProblemCreation;
@using System.ComponentModel.DataAnnotations;

<h3>Goal Space Explorer <a data-bs-toggle="modal" data-bs-target="#explanationModal" href="#"><span class="bi bi-info-circle" aria-hidden="true"></span></a></h3>

<div class="modal fade" id="explanationModal" tabindex="-1" aria-labelledby="explanationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="explanationModalLabel">Explanation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>
                    This page is an interactive demonstration of (PDDL parsing and) the goal space representation types found in the <a href="https://github.com/sdcondon/SCClassicalPlanning/tree/main/src/SCClassicalPlanning/Planning/StateAndGoalSpace">SCClassicalPlanning.Planning.StateAndGoalSpace</a> namespace.
                    It runs entirely in your browser.
                    Notes:
                </p>
                <ul>
                    <li>
                        Not advertising this until "lifted" goal space is working, and/or making use of invariants to prune obviously unsatisfiable goals.
                        If you've found it anyway.. well done, I guess.
                    </li>
                    <li>
                        Use the buttons at the top of the form to populate it with example domain and problem definitions,
                        using a minimal version of <a href="https://www.google.com/search?q=planning+domain+definition+language">PDDL</a>.
                    </li>
                    <li>
                        Some guidance for defining problems as PDDL will be added to the getting started page at some point before v1.
                        For now, consult the presets and Internet resources about PDDL.
                        Note that we use an absolutely minimal version of the earliest public version of PDDL (1.2).
                        Absolutely no extensions are supported - not even typing.
                        Yet.
                    </li>
                    <li>
                        Once the problem definition has been submitted, a representation of the goal of the problem will appear below the form.
                        You can explore the goal space by clicking on the action to regress.
                    </li>
                    <li>
                        The source code for this page can be found <a href="https://github.com/sdcondon/SCClassicalPlanning/blob/main/src/SCClassicalPlanning.Documentation/Pages/lab/GoalSpaceExplorer.razor">here</a>.
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>

<EditForm Model=@formData OnSubmit=@HandleFormSubmission class="row" style="font-family: monospace">
    <DataAnnotationsValidator />
    <div class="form-group col-12">
        <label>Presets</label>
        <div>
            @foreach (var kvp in Presets)
            {
                <button @onclick="@(() => formData = kvp.Value.Invoke())">@kvp.Key</button>
                @(" ")
            }
        </div>
    </div>
    <div class="form-group col-md-6">
        <label for="domainPddlTextArea">Domain PDDL</label>
        <InputTextArea class="form-control small" id="domainPddlTextArea" @bind-Value=formData.DomainPDDL rows="12" />
        <ValidationMessage For="@(() => formData.DomainPDDL)" />
    </div>
    <div class="form-group col-md-6">
        <label for="problemPddlTextArea">Problem PDDL</label>
        <InputTextArea class="form-control small" id="factsTextArea" @bind-Value=formData.ProblemPDDL rows="12" />
        <ValidationMessage For="@(() => formData.ProblemPDDL)" />
    </div>
    <div class="form-group mt-2 col-12">
        <button type="submit" class="btn btn-primary">Submit / Reset</button>
    </div>
</EditForm>

@{
    void RenderListItem(LinkedListNode<GoalSpaceEdge>? lastPathNode, GoalSpaceNode goalNode, GoalSpaceEdge? nextExploredEdge)
    {
        <li>
            @if (goalNode.Goal.IsSatisfiedBy(problem.InitialState))
            {
                <b>INITIAL STATE SATISFIES THIS! </b>
            }
            @{
                // richer formatting functionality could make this more succinct, which would be nice..
                var goalElements = goalNode.Goal.Elements
                .OrderBy(e => e.Predicate.Identifier.ToString())
                .ThenBy(e => string.Join(",", e.Predicate.Arguments.Select(a => a.ToString())));
            }
            @string.Join(" ∧ ", goalElements);

            <ul>
                @foreach (var edge in goalNode.Edges)
                {
                    <li>
                        <!-- yeah, should be a button not an anchor, but all of bootstrap's classes make it look rubbish.. -->
                        <!-- disclaimer: the author doesn't consider themselves a front-end dev.. -->
                        <a href="#"
                            role="button"
                            style="@(edge.Equals(nextExploredEdge) ? "font-weight:bold" : "")"
                            @onclick="@(() => ExploreEdge(lastPathNode, edge))"
                            @onclick:preventDefault>@edge.ToString()</a>
                    </li>
                }
            </ul>
        </li>
    }

    if (problem != null)
    {
        <ol class="mt-4">
            @{
                RenderListItem(null, new GoalSpaceNode(problem, problem.Goal), path.First?.Value);
            }

            @for (var n = path.First; n != null; n = n.Next)
            {
                RenderListItem(n, n.Value.To, n.Next?.Value);
            }
        </ol>
    }
}

@code {
    private static Dictionary<string, Func<FormData>> Presets = new()
        {
            ["[Empty]"] = () => new(
                domainPddl: string.Empty,
                problemPddl: string.Empty),

            ["Blocks World"] = () => new(
                domainPddl: BlocksWorld.DomainPDDL,
                problemPddl: BlocksWorld.ExampleProblemPDDL),

            ["Air Cargo"] = () => new(
                domainPddl: AirCargo.DomainPDDL,
                problemPddl: AirCargo.ExampleProblemPDDL),
        };

    private FormData formData = Presets["Blocks World"].Invoke();

    private Exception? parseError = null; // TODO: should be done via form validation instead.. tidy me!
    private Problem? problem = null;
    private LinkedList<GoalSpaceEdge> path = new();

    private void HandleFormSubmission(EditContext editContext)
    {
        problem = null;
        path.Clear();

        if (editContext.Validate())
        {
            problem = PddlParser.ParseProblem(formData.ProblemPDDL, formData.DomainPDDL);
        }
    }

    private void ExploreEdge(LinkedListNode<GoalSpaceEdge>? lastPathNode, GoalSpaceEdge edge)
    {
        if (lastPathNode != null)
        {
            // huh, weird - i thought .net linked lists could just be chopped.
            // turns out we have to remove nodes one at a time.
            while (lastPathNode.Next != null)
            {
                path.Remove(lastPathNode.Next);
            }
        }
        else
        {
            path.Clear();
        }

        path.AddLast(edge);
    }

    private class FormData : IValidatableObject
    {
        public FormData(string domainPddl, string problemPddl)
        {
            this.DomainPDDL = domainPddl;
            this.ProblemPDDL = problemPddl;
        }

        public string DomainPDDL { get; set; }

        public string ProblemPDDL { get; set; }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            // Yes, could cache the parse results to avoid parsing multiple times, but not worth it for now at least.
            // TODO: Some "TryParse.." methods might be useful - they'd certainly make this method a bit cleaner.
            // TODO: If we had a ParseError exception type, we could perhaps highlight the offending text..
            HashSetDomain? domain = null;
            Problem? problem = null;
            List<ValidationResult> errors = new();
            try
            {
                domain = PddlParser.ParseDomain(DomainPDDL);

                try
                {
                    problem = PddlParser.ParseProblem(ProblemPDDL, domain!);
                }
                catch (Exception e)
                {
                    errors.Add(new ValidationResult(e.Message, new[] { nameof(ProblemPDDL) }));
                }
            }
            catch (Exception e)
            {
                errors.Add(new ValidationResult(e.Message, new[] { nameof(DomainPDDL) }));
            }

            return errors;
        }
    }
}
